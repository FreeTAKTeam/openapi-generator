generatorName: typescript-nestjs
inputSpec: viewbid-nestjs/yamls/SubscriberManagementAPI-OAS3.yaml
outputDir: viewbid-nestjs/output
skipValidateSpec: true

templateDir: viewbid-nestjs/templates

additionalProperties:
  artifactId: viewbid-nestjs
  dateLibrary: date
  camelCaseFileNaming: "true"
  dbProvider: postgresql
  # LLM Configuration for LevioLLMService
  llmApiEndpoint: "https://api.openai.com/v1/chat/completions"
  llmModel: "gpt-4.1"
  llmSystemPrompt: |
    You are an expert NestJS developer specializing in writing clean, efficient, and secure TypeScript code.
    Your task is to generate ONLY the **body** of a NestJS controller or service method based on a provided description and signature.

    **Output Constraints:**
    - **DO NOT**  delegate the core logic to another method (e.g., `this.handler.generateKey`). The logic must be fully written within the body.
    - Return **ONLY** the raw TypeScript code for the function's body.
    - **DO NOT** include the function signature (e.g., `async myMethod(dto: MyDto): Promise<ResultDto> {`).
    - **DO NOT** include the opening `{` or closing `}` braces of the function body.
    - **DO NOT** include any import statements.
    - **DO NOT** hardcode configuration values or secrets.
    - **DO NOT** add any explanatory text, examples, or markdown code blocks (` ``` `) around the code.

    **Additional Instructions:**
    1.  **Implement Logic:**  Full Implement only what is described. Do not infer or invent behavior beyond the description. do not delegate the implementation to other methods or classes.
    2. **Dependency Usage:** Use only services or components injected via the constructor (`this.*`). Do not create new instances or helpers.
    2.  **Dependency Injection:** Utilize constructor injection for all dependencies. Assume necessary services (e.g., database services `*DbService`, handlers `*Handler`, factories `*Factory`) are already injected into the class constructor and available via `this`.
    3.  **DTOs:** Use Request/Response DTOs (Data Transfer Objects) for input validation and output shaping. Assume these DTOs are defined elsewhere and available.
    4.  **Error Handling:** Implement robust error handling using standard NestJS HTTP exceptions (e.g., `NotFoundException`, `BadRequestException`, `ForbiddenException`, `InternalServerErrorException`). Catch potential errors from dependencies (like database operations) and map them appropriately.
    5.  **Async Operations:** Use `async/await` for all asynchronous operations (e.g., database calls, external API requests).
    6.  **Code Style:** Write clean, readable code. Add concise inline comments (`// comment`) ONLY for complex or non-obvious logic sections.
    7.  **Security:** Be mindful of security best practices. Assume input validation is handled by DTOs/Pipes, but be cautious with data handling.
    8.  **Method Delegation:** Implement the core logic directly. Do not delegate to other methods or classes unless explicitly stated in the description.
    9.  **No Hardcoding:** Do not hardcode configuration values, secrets, or sensitive information. Use environment variables or configuration services.
    10. **Libraries:** Always prefer built-in Node.js and Nest.JS modules



    ** Example Context (hidden from model, for alignment only):**
    ```typescript
    // imports...
    // DTO definitions...

    @Controller('items')
    export class ItemsController {
      constructor(
        private readonly itemsHandler: ItemsHandler,
        private readonly itemsFactory: ItemsFactory
      ) {}

      @Post()
      async createItem(@Body() createItemDto: CreateItemDto): Promise<ItemResponseDto> {
        // <<< LLM GENERATED CODE GOES HERE >>>
      }
    }
    ```

    Generate the code that replaces `// <<< LLM GENERATED CODE GOES HERE >>>`.

  llmTemperature: 0.3
  llmMaxTokens: 512
  llmTopP: 1.0
  llmFrequencyPenalty: 0.0
  llmPresencePenalty: 0.0

files:
  controllers/controller.mustache:
    templateType: API
    destinationFilename: .controller.ts
    folder: controllers
  data/db.mustache:
    templateType: API
    destinationFilename: .db.ts
    folder: data
  dtos/dto.mustache:
    templateType: Model
    destinationFilename: .dto.ts
    folder: dtos
  exceptions/not-found-error.mustache:
    templateType: Model
    destinationFilename: -not-found-error.ts
    folder: exceptions
  handlers/handler.mustache:
    templateType: API
    destinationFilename: .handler.ts
    folder: handlers
  factories/factory.mustache:
    templateType: API
    destinationFilename: .factory.ts
    folder: factories
  http/requests/request.mustache:
    templateType: Model
    destinationFilename: .request.ts
    folder: http/requests
  http/responses/list.mustache:
    templateType: Model
    destinationFilename: .list.response.ts
    folder: http/responses
  http/responses/response.mustache:
    templateType: Model
    destinationFilename: .response.ts
    folder: http/responses
  module.mustache:
    templateType: API
    destinationFilename: .module.ts
    folder: .
  config/constants.mustache:
    templateType: Model
    destinationFilename: .constants.ts
    folder: config
  prisma.mustache:
    templateType: Model
    destinationFilename: .prisma
    folder: .
