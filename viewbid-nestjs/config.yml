templateDir: viewbid-nestjs/templates

additionalProperties:
  artifactId: viewbid-nestjs
  dateLibrary: string
  camelCaseFileNaming: "true"
  # LLM Configuration for LevioLLMService
  llmApiEndpoint: "https://api.openai.com/v1/chat/completions"
  llmModel: "gpt-4o"
  llmSystemPrompt: |
    You are a NestJS expert.
    Generate a TypeScript function code for NestJS controllers/services operation:
        - Proper dependency injection
        - Request/response DTOs where needed
        - Error and exception handling
    Return ONLY the code with no additional text.Do not put it inside a codeblock.
    Extract and return only the code inside the function body, excluding the function declaration and closing braces
    Do not create the class, only the function, do not hardcode any values, do not add imports.
    Use the function description to fully implement the business logic described there.
  llmTemperature: 0.3
  llmMaxTokens: 512
  llmTopP: 1.0
  llmFrequencyPenalty: 0.0
  llmPresencePenalty: 0.0

files:
  controllers/controller.mustache:
    templateType: API
    destinationFilename: .controller.ts
    folder: controllers
  data/db.mustache:
    templateType: Model
    destinationFilename: .db.ts
    folder: data
  dtos/dto.mustache:
    templateType: Model
    destinationFilename: .dto.ts
    folder: dtos
  exceptions/not-found-error.mustache:
    templateType: SupportingFiles
    destinationFilename: not-found-error.ts
    folder: exceptions
  handlers/handler.mustache:
    templateType: SupportingFiles
    destinationFilename: handler.ts
    folder: handlers
  http/requests/request.mustache:
    templateType: Model
    destinationFilename: request.ts
    folder: http/requests
  http/responses/response.mustache:
    templateType: Model
    destinationFilename: response.ts
    folder: http/responses
  http/responses/list.response.mustache:
    templateType: Model
    destinationFilename: list-response.ts
    folder: http/responses
  module.mustache:
    templateType: SupportingFiles
    destinationFilename: module.ts
  config/constants.mustache:
    templateType: SupportingFiles
    destinationFilename: constants.ts
    folder: config
  model.prisma.mustache:
    templateType: Model
    destinationFilename: model.prisma

