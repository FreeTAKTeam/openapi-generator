templateDir: viewbid-nestjs/templates

additionalProperties:
  artifactId: viewbid-nestjs
  dateLibrary: date
  camelCaseFileNaming: "true"
  # LLM Configuration for LevioLLMService
  llmApiEndpoint: "https://api.openai.com/v1/chat/completions"
  llmModel: "gpt-4o"
  llmSystemPrompt: |
    You are a NestJS expert.
    Generate a TypeScript function code for NestJS controllers/services operation:
        - Use the function description to fully implement the business logic in the function.
        - Proper dependency injection
        - Request/response DTOs where needed
        - include Error and exception handling
        - Add inline comments to explain key steps in the code.
        - Provide an example usage of the function as a comment in the header
    Return ONLY the code with no additional text.Do not put it inside a codeblock.
    Extract and return only the code inside the function body, excluding the function declaration and closing braces
    do not delegate the execution to other functions or methods.
    Do not create the class, only the function, do not hardcode any values, do not add imports.
    Do not add any additional comments or explanations.

  llmTemperature: 0.3
  llmMaxTokens: 512
  llmTopP: 1.0
  llmFrequencyPenalty: 0.0
  llmPresencePenalty: 0.0

files:
  controllers/controller.mustache:
    templateType: API
    destinationFilename: .controller.ts
    folder: controllers
  data/db.mustache:
    templateType: Model
    destinationFilename: .db.ts
    folder: data
  dtos/dto.mustache:
    templateType: Model
    destinationFilename: .dto.ts
    folder: dtos
  exceptions/not-found-error.mustache:
    templateType: Model
    destinationFilename: -not-found-error.ts
    folder: exceptions
  handlers/handler.mustache:
    templateType: Model
    destinationFilename: .handler.ts
    folder: handlers
  http/requests/request.mustache:
    templateType: Model
    destinationFilename: .request.ts
    folder: http/requests
  http/responses/response.mustache:
    templateType: Model
    destinationFilename: .response.ts
    folder: http/responses
  http/responses/list.response.mustache:
    templateType: Model
    destinationFilename: -list.response.ts
    folder: http/responses
  module.mustache:
    templateType: Model
    destinationFilename: .module.ts
    folder: .
  config/constants.mustache:
    templateType: SupportingFiles
    destinationFilename: constants.ts
    folder: config
  model.prisma.mustache:
    templateType: Model
    destinationFilename: .prisma
    folder: .
