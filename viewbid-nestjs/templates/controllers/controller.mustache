{{>licenseInfo}}

import { Body, Controller, Delete, Get, Param, Patch, Post, Put, Query, Req, UseGuards } from '@nestjs/common';
import { BaseController } from '@mvc/controllers/base.controller';
import { ErrorResponse } from '@mvc/http/responses/error-response';
import { AxiosRequestConfig } from 'axios';
import { Observable } from 'rxjs';
import { {{classname}}Handler } from '../handlers/{{classVarName}}.service.handler';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Request } from '../http/requests/{{classVarName}}.request';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto } from '../dtos/{{classVarName}}.dto';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}ListResponse } from '../http/responses/{{classVarName}}.list.response';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Response } from '../http/responses/{{classVarName}}.response';

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Controller('{{classname}}')
export class {{classname}}Controller extends BaseController<
    {{classname}}Handler,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Request,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Response,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}ListResponse
    > {

    constructor(handler: {{classname}}Handler) {
        super(handler);
    }

    createDtoFromRequest(request: {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Request): {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto {
    return new {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto(request);
    }

    createResponseFromDto(dto: {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto): {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Response {
    return new {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Response(dto);
    }

    createResponseList(list: ListResultset<{{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto>): {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}ListResponse {
    return new {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}ListResponse(list);
    }

{{#operations}}
{{#operation}}
    {{#vendorExtensions}}
    {{> controllers/partials/methodDocumentation }}
    {{#isPublic}}
    @{{#lambda.pascalcase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.pascalcase}}('{{path}}')
    {{/isPublic}}
    {{#isPrivate}}private{{/isPrivate}}{{^isPrivate}}public{{/isPrivate}} async {{nickname}}({{> controllers/partials/methodParameters }}): Promise<{{#returnType}}{{{.}}}{{/returnType}}{{^returnType}}any{{/returnType}}>
    {{> controllers/partials/methodBody }}
    {{/vendorExtensions}}
{{/operation}}
}
{{/operations}}
