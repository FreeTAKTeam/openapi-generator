{{>licenseInfo}}

import { Body, Controller, Delete, Get, Param, Patch, Post, Put, Query, Req, UseGuards } from '@nestjs/common';
import { BaseController } from '@mvc/controllers/base.controller';
import { AxiosRequestConfig } from 'axios';
import { Observable } from 'rxjs';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Handler } from '../handlers/{{classVarName}}.handler';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Request } from '../http/requests/{{classVarName}}.request';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto } from '../dtos/{{classVarName}}.dto';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}ListResponse } from '../http/responses/{{classVarName}}.list.response';
import { {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Response } from '../http/responses/{{classVarName}}.response';

{{#description}}
/**
 * {{&description}}
 */
{{/description}}
@Controller('{{classname}}')
export class {{classname}}Controller extends BaseController<
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Handler,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Request,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Response,
    {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}ListResponse
    > {
    constructor(handler: {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Handler) {
        super(handler, {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Dto, {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}Response, {{#lambda.pascalcase}}{{classVarName}}{{/lambda.pascalcase}}ListResponse);
    }
{{#operations}}
{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#useSingleRequestParameter}}
     {{#allParams.0}}
     * @param {{=<% %>=}}{<%& classname %><%& operationIdCamelCase %>Request}<%={{ }}=%> requestParameters Request parameters.
     {{/allParams.0}}
     {{/useSingleRequestParameter}}
     {{^useSingleRequestParameter}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}
     {{/useSingleRequestParameter}}
     * @param {*} [{{nickname}}Opts.config] Override http request option.
     */
    @{{#lambda.pascalcase}}{{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}{{/lambda.pascalcase}}('{{path}}')
    {{#vendorExtensions}}
    {{#isPrivate}}private{{/isPrivate}}{{^isPrivate}}public{{/isPrivate}} {{nickname}}({{> controllers/partials/methodParameters }}): Observable<any> {
        {{#isPublic}}
        // Regular implementation - Handled by BaseController or specific handler logic
        {{/isPublic}}
        {{#isPrivate}}
        // This is an Internal method only, not exposed in the API
        // Implementation likely resides in the handler or is omitted from generation
        {{/isPrivate}}
        {{#isPackage}}
        // TODO: this method has been sent to an LLM to be generated and needs review.
        // Delete this comment afterward.
        // {{operationId}} - PACKAGE SCOPE
        // Description: {{notes}}
        {{{llmImplementation}}}
        {{/isPackage}}

        // Parameter processing (destructuring, validation)
        {{> controllers/partials/parameterProcessing }}

        // Query parameter construction
        {{#hasQueryParams}}
        {{> controllers/partials/buildQueryParameters }}
        {{/hasQueryParams}}

        // TODO: Add call to the actual handler method, passing processed parameters
        // Example: return this.handler.{{nickname}}(...);
    } // End of method {{nickname}}
    {{/vendorExtensions}}
{{/operation}}
}
{{/operations}}
